{
  "address": "0x96243a097DA599eeaC56a9AfA5B897076aF485dC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyAnnounce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BelowsMinimumAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsMaxChoiceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsPredictionLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndAt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoPrize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PredictionEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PredictionNotStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PredictionOnGoing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unclaimable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "winnerId",
          "type": "uint16"
        }
      ],
      "name": "AnnounceWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "winnerId",
          "type": "uint16"
        }
      ],
      "name": "ClaimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPredictAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initiatePrize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "maxPredictCount",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "maxChoiceId",
          "type": "uint16"
        }
      ],
      "name": "InitiateGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "choiceId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "predictCount",
          "type": "uint16"
        }
      ],
      "name": "Predict",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accumulateRemainingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_winnerId",
          "type": "uint16"
        }
      ],
      "name": "announceWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentGameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_offset",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_limit",
          "type": "uint16"
        }
      ],
      "name": "getAllChoicePools",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "allChoicePools",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_choiceId",
          "type": "uint16"
        }
      ],
      "name": "getUserPrediction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_maxChoiceId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_maxPredictCount",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minPredictAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initiatePrize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endAt",
          "type": "uint256"
        }
      ],
      "name": "initiateGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_choiceId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "predict",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "predictionCount",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "predictions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minPredictAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPoolPrize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endAt",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "maxPredictCount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "maxChoiceId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "winnerId",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "isClaimable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "viewReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8363974e71bd449f2fde10acb8c7963afcee3b228249594f7d260c5698c3c3bd",
  "receipt": {
    "to": null,
    "from": "0x3E4A8608c685625b46F1A03c8f2928781eaac2c3",
    "contractAddress": "0x6676ca84870123427451d770a8848A53E828719D",
    "transactionIndex": 0,
    "gasUsed": "2017701",
    "logsBloom": "0x
    "blockHash": "0xb91f5f40cc886046b8a00772d3688e916664f1a5f5fff68e82cafbbd8b63a148",
    "transactionHash": "0x8363974e71bd449f2fde10acb8c7963afcee3b228249594f7d260c5698c3c3bd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1042701,
        "transactionHash": "0x8363974e71bd449f2fde10acb8c7963afcee3b228249594f7d260c5698c3c3bd",
        "address": "0x6676ca84870123427451d770a8848A53E828719D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003e4a8608c685625b46f1a03c8f2928781eaac2c3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb91f5f40cc886046b8a00772d3688e916664f1a5f5fff68e82cafbbd8b63a148"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1042701,
        "transactionHash": "0x8363974e71bd449f2fde10acb8c7963afcee3b228249594f7d260c5698c3c3bd",
        "address": "0x6676ca84870123427451d770a8848A53E828719D",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003e4a8608c685625b46f1a03c8f2928781eaac2c3",
          "0x0000000000000000000000003e4a8608c685625b46f1a03c8f2928781eaac2c3"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb91f5f40cc886046b8a00772d3688e916664f1a5f5fff68e82cafbbd8b63a148"
      }
    ],
    "blockNumber": 1042701,
    "cumulativeGasUsed": "2017701",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x402349046AA8F7e6fC355E7c8B4654D3e6967FD9"
  ],
  "numDeployments": 1,
  "solcInputHash": "58d8256ed610763349689f96d6547d03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyAnnounce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BelowsMinimumAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxChoiceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsPredictionLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndAt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPrize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PredictionEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PredictionNotStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PredictionOnGoing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unclaimable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"winnerId\",\"type\":\"uint16\"}],\"name\":\"AnnounceWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"winnerId\",\"type\":\"uint16\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPredictAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initiatePrize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxPredictCount\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxChoiceId\",\"type\":\"uint16\"}],\"name\":\"InitiateGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"choiceId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"predictCount\",\"type\":\"uint16\"}],\"name\":\"Predict\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulateRemainingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_winnerId\",\"type\":\"uint16\"}],\"name\":\"announceWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentGameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_offset\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_limit\",\"type\":\"uint16\"}],\"name\":\"getAllChoicePools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"allChoicePools\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_choiceId\",\"type\":\"uint16\"}],\"name\":\"getUserPrediction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_maxChoiceId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_maxPredictCount\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minPredictAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initiatePrize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endAt\",\"type\":\"uint256\"}],\"name\":\"initiateGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_choiceId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"predict\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"predictionCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"predictions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minPredictAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoolPrize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxPredictCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxChoiceId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"winnerId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isClaimable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WinnerTakeAll.sol\":\"WinnerTakeAll\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/WinnerTakeAll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract WinnerTakeAll is AccessControl, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct Prediction {\\n        mapping(address => mapping(uint16 => PredictionInfo)) userPrediction;\\n        mapping(uint16 => uint256) choicePools;\\n        uint256 minPredictAmount;\\n        uint256 totalPoolPrize;\\n        uint256 startAt;\\n        uint256 endAt;\\n        uint16 maxPredictCount;\\n        uint16 maxChoiceId;\\n        uint16 winnerId;\\n        bool isClaimable;\\n    }\\n\\n    struct PredictionInfo {\\n        uint256 amount;\\n        bool isClaim;\\n    }\\n\\n    IERC20 public token;\\n\\n    bytes32 public constant ADMIN_ROLE =\\n        0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775; // keccak256(\\\"ADMIN_ROLE\\\")\\n\\n    uint256 public currentGameId;\\n    uint256 public accumulateRemainingReward;\\n\\n    mapping(uint256 => Prediction) public predictions;\\n    mapping(address => mapping(uint256 => uint16)) public predictionCount;\\n\\n    error BelowsMinimumAmount();\\n    error ExceedsPredictionLimit();\\n    error InvalidEndAt();\\n    error ExceedsMaxChoiceId();\\n    error PredictionEnded();\\n    error PredictionOnGoing();\\n    error PredictionNotStart();\\n    error Unclaimable();\\n    error AlreadyAnnounce();\\n    error AlreadyClaimed();\\n    error NoPrize();\\n\\n    event InitiateGame(\\n        uint256 indexed gameId,\\n        uint256 minPredictAmount,\\n        uint256 initiatePrize,\\n        uint256 startAt,\\n        uint256 endAt,\\n        uint16 maxPredictCount,\\n        uint16 maxChoiceId\\n    );\\n\\n    event Predict(\\n        uint256 indexed gameId,\\n        address user,\\n        uint256 amount,\\n        uint16 choiceId,\\n        uint16 predictCount\\n    );\\n\\n    event AnnounceWinner(uint256 indexed gameId, uint16 winnerId);\\n\\n    event ClaimReward(\\n        uint256 indexed gameId,\\n        address user,\\n        uint256 betAmount,\\n        uint256 reward,\\n        uint16 winnerId\\n    );\\n\\n    constructor(address _token) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        token = IERC20(_token);\\n    }\\n\\n    function initiateGame(\\n        uint16 _maxChoiceId,\\n        uint16 _maxPredictCount,\\n        uint256 _minPredictAmount,\\n        uint256 _initiatePrize,\\n        uint256 _endAt\\n    ) external onlyRole(ADMIN_ROLE) {\\n        if (_endAt < block.timestamp) {\\n            revert InvalidEndAt();\\n        }\\n\\n        token.safeTransferFrom(msg.sender, address(this), _initiatePrize);\\n\\n        Prediction storage prediction = predictions[++currentGameId];\\n        prediction.minPredictAmount = _minPredictAmount;\\n        prediction.totalPoolPrize = _initiatePrize;\\n        prediction.startAt = block.timestamp;\\n        prediction.endAt = _endAt;\\n        prediction.maxPredictCount = _maxPredictCount;\\n        prediction.maxChoiceId = _maxChoiceId;\\n\\n        accumulateRemainingReward += _initiatePrize;\\n\\n        emit InitiateGame(\\n            currentGameId,\\n            _minPredictAmount,\\n            _initiatePrize,\\n            prediction.startAt,\\n            _endAt,\\n            _maxPredictCount,\\n            _maxChoiceId\\n        );\\n    }\\n\\n    function predict(\\n        uint256 _gameId,\\n        uint16 _choiceId,\\n        uint256 _amount\\n    ) external {\\n        Prediction storage prediction = predictions[_gameId];\\n\\n        uint16 count = ++predictionCount[msg.sender][_gameId];\\n        if (\\n            count > prediction.maxPredictCount &&\\n            prediction.maxPredictCount != 0\\n        ) {\\n            revert ExceedsPredictionLimit();\\n        }\\n        if (_amount < prediction.minPredictAmount) {\\n            revert BelowsMinimumAmount();\\n        }\\n        if (block.timestamp > prediction.endAt) {\\n            revert PredictionEnded();\\n        }\\n        if (_choiceId >= prediction.maxChoiceId) {\\n            revert ExceedsMaxChoiceId();\\n        }\\n\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        prediction.userPrediction[msg.sender][_choiceId].amount += _amount;\\n        prediction.choicePools[_choiceId] += _amount;\\n        prediction.totalPoolPrize += _amount;\\n\\n        accumulateRemainingReward += _amount;\\n\\n        emit Predict(_gameId, msg.sender, _amount, _choiceId, count);\\n    }\\n\\n    function announceWinner(\\n        uint256 _gameId,\\n        uint16 _winnerId\\n    ) external onlyRole(ADMIN_ROLE) {\\n        Prediction storage prediction = predictions[_gameId];\\n\\n        if (prediction.isClaimable) {\\n            revert AlreadyAnnounce();\\n        }\\n\\n        if (prediction.startAt == 0) {\\n            revert PredictionNotStart();\\n        }\\n\\n        if (block.timestamp <= prediction.endAt) {\\n            revert PredictionOnGoing();\\n        }\\n\\n        prediction.winnerId = _winnerId;\\n        prediction.isClaimable = true;\\n\\n        if (prediction.choicePools[_winnerId] == 0) {\\n            accumulateRemainingReward -= prediction.totalPoolPrize;\\n        }\\n\\n        emit AnnounceWinner(_gameId, _winnerId);\\n    }\\n\\n    function claimReward(uint256 _gameId, address _user) external {\\n        Prediction storage prediction = predictions[_gameId];\\n\\n        if (!prediction.isClaimable) {\\n            revert Unclaimable();\\n        }\\n\\n        PredictionInfo storage predictionInfo = prediction.userPrediction[\\n            _user\\n        ][prediction.winnerId];\\n\\n        if (predictionInfo.isClaim) {\\n            revert AlreadyClaimed();\\n        }\\n\\n        uint256 reward = _calculateReward(_gameId, _user);\\n\\n        if (reward == 0) {\\n            revert NoPrize();\\n        }\\n\\n        predictionInfo.isClaim = true;\\n\\n        accumulateRemainingReward -= reward;\\n\\n        token.safeTransfer(_user, reward);\\n\\n        emit ClaimReward(\\n            _gameId,\\n            _user,\\n            predictionInfo.amount,\\n            reward,\\n            prediction.winnerId\\n        );\\n    }\\n\\n    function viewReward(\\n        uint256 _gameId,\\n        address _user\\n    ) external view returns (uint256) {\\n        if (!predictions[_gameId].isClaimable) {\\n            return 0;\\n        }\\n        return _calculateReward(_gameId, _user);\\n    }\\n\\n    function _calculateReward(\\n        uint256 _gameId,\\n        address _user\\n    ) internal view returns (uint256) {\\n        Prediction storage prediction = predictions[_gameId];\\n        if (prediction.choicePools[prediction.winnerId] == 0) {\\n            return 0;\\n        }\\n        return\\n            (prediction.userPrediction[_user][prediction.winnerId].amount *\\n                prediction.totalPoolPrize) /\\n            prediction.choicePools[prediction.winnerId];\\n    }\\n\\n    function getAllChoicePools(\\n        uint256 _gameId,\\n        uint16 _offset,\\n        uint16 _limit\\n    ) external view returns (uint256[] memory allChoicePools, uint16) {\\n        Prediction storage prediction = predictions[_gameId];\\n\\n        if (_limit == 0) {\\n            _limit = 1;\\n        }\\n\\n        if (_limit > prediction.maxChoiceId - _offset) {\\n            _limit = prediction.maxChoiceId - _offset;\\n        }\\n\\n        allChoicePools = new uint256[](_limit);\\n\\n        for (uint16 i; i < _limit; ++i) {\\n            allChoicePools[i] = prediction.choicePools[_offset + i];\\n        }\\n        return (allChoicePools, _offset + _limit);\\n    }\\n\\n    function getUserPrediction(\\n        uint256 _gameId,\\n        address _user,\\n        uint16 _choiceId\\n    ) external view returns (uint256, bool) {\\n        PredictionInfo memory predictionInfo = predictions[_gameId]\\n            .userPrediction[_user][_choiceId];\\n        return (predictionInfo.amount, predictionInfo.isClaim);\\n    }\\n\\n    function recoverERC20(address _tokenAddress) external onlyOwner {\\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\n        if (_tokenAddress == address(token)) {\\n            token.safeTransfer(owner(), balance - accumulateRemainingReward);\\n        } else {\\n            IERC20(_tokenAddress).safeTransfer(owner(), balance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1777bbd82da0b374937e134a3c5042b8ff5ff944d48636a4ed81517c1bb37f8b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200241638038062002416833981016040819052620000349162000174565b6200003f3362000072565b6200004c600033620000c4565b600280546001600160a01b0319166001600160a01b0392909216919091179055620001a6565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620000d08282620000d4565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000d0576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001303390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000602082840312156200018757600080fd5b81516001600160a01b03811681146200019f57600080fd5b9392505050565b61226080620001b66000396000f3fe608060405234801561001057600080fd5b50600436106101975760003560e01c80639e8c708e116100e3578063eb10d1581161008c578063f86f13ba11610066578063f86f13ba14610480578063fc0c546a14610507578063fc78728d1461052757600080fd5b8063eb10d15814610439578063f2fde38b1461044c578063f3196b5f1461045f57600080fd5b8063d1619908116100bd578063d161990814610400578063d547741f14610413578063e70eb3921461042657600080fd5b80639e8c708e146103dc5780639eed2670146103ef578063a217fddf146103f857600080fd5b806338f3f8eb1161014557806375b238fc1161011f57806375b238fc146103325780638da5cb5b1461035957806391d148541461039857600080fd5b806338f3f8eb1461030e578063536a3ddc14610321578063715018a61461032a57600080fd5b8063248a9ca311610176578063248a9ca3146102b55780632f2ff15d146102e657806336568abe146102fb57600080fd5b80624fbbb01461019c57806301ffc9a714610250578063080df42a14610273575b600080fd5b6102046101aa366004611c6c565b60056020819052600091825260409091206002810154600382015460048301549383015460069093015491939092909161ffff80821691620100008104821691640100000000820416906601000000000000900460ff1688565b60408051988952602089019790975295870194909452606086019290925261ffff908116608086015290811660a08501521660c0830152151560e0820152610100015b60405180910390f35b61026361025e366004611c85565b61053a565b6040519015158152602001610247565b6102a2610281366004611cf0565b600660209081526000928352604080842090915290825290205461ffff1681565b60405161ffff9091168152602001610247565b6102d86102c3366004611c6c565b60009081526020819052604090206001015490565b604051908152602001610247565b6102f96102f4366004611d1a565b6105d3565b005b6102f9610309366004611d1a565b6105fd565b6102f961031c366004611d58565b6106b5565b6102d860035481565b6102f961088a565b6102d87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60015473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610247565b6102636103a6366004611d1a565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6102f96103ea366004611d7b565b61089e565b6102d860045481565b6102d8600081565b6102f961040e366004611d96565b6109ec565b6102f9610421366004611d1a565b610b7f565b6102f9610434366004611d1a565b610ba4565b6102f9610447366004611de3565b610da1565b6102f961045a366004611d7b565b611024565b61047261046d366004611e18565b6110db565b604051610247929190611e54565b6104f261048e366004611ea3565b600083815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452825280832061ffff851684528252918290208251808401909352805480845260019091015460ff1615159290910182905290935093915050565b60408051928352901515602083015201610247565b6002546103739073ffffffffffffffffffffffffffffffffffffffff1681565b6102d8610535366004611d1a565b61120e565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806105cd57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000828152602081905260409020600101546105ee8161124a565b6105f88383611254565b505050565b73ffffffffffffffffffffffffffffffffffffffff811633146106a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6106b18282611344565b5050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756106df8161124a565b600083815260056020526040902060068101546601000000000000900460ff1615610736576040517f991744c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004810154610771576040517f633b245f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806005015442116107ae576040517fdd2048e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006810180547fffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff61ffff86166401000000008102919091167fffffffffffffffffffffffffffffffffffffffffffffffffff000000ffffffff90921691909117660100000000000017909155600090815260018201602052604090205461084b578060030154600460008282546108459190611ef7565b90915550505b60405161ffff8416815284907fa22b773d9d9c167c4b5790dace2919b1e514f1517a568980be43af1fdf41bf129060200160405180910390a250505050565b6108926113fb565b61089c600061147c565b565b6108a66113fb565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109379190611f0e565b60025490915073ffffffffffffffffffffffffffffffffffffffff838116911614156109ac576106b161097f60015473ffffffffffffffffffffffffffffffffffffffff1690565b60045461098c9084611ef7565b60025473ffffffffffffffffffffffffffffffffffffffff1691906114f3565b6106b16109ce60015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff841690836114f3565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610a168161124a565b42821015610a50576040517f2e19adc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254610a759073ffffffffffffffffffffffffffffffffffffffff163330866115c7565b600060056000600360008154610a8a90611f27565b91829055508152602081019190915260400160009081206002810187905560038101869055426004808301919091556005820186905560068201805461ffff8c811662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000909216908c1617179055805491935086929091610b10908490611f60565b909155505060035460048201546040805188815260208101889052808201929092526060820186905261ffff89811660808401528a1660a0830152517fd449b74436531695b31f0a3a97a73ddd8d7bd101a5938bc8dc3829c3ef7b50a29181900360c00190a250505050505050565b600082815260208190526040902060010154610b9a8161124a565b6105f88383611344565b600082815260056020526040902060068101546601000000000000900460ff16610bfa576040517f47bc8d9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152602082815260408083206006850154640100000000900461ffff1684529091529020600181015460ff1615610c77576040517f646cf55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610c83858561162b565b905080610cbc576040517f273b4b7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600182810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909117905560048054829190600090610cff908490611ef7565b9091555050600254610d289073ffffffffffffffffffffffffffffffffffffffff1685836114f3565b815460068401546040805173ffffffffffffffffffffffffffffffffffffffff8816815260208101939093528201839052640100000000900461ffff16606082015285907f4c49710a89d488ef5b4f7f4be97fee6539487344239eab7fc41be528579d741e906080015b60405180910390a25050505050565b600083815260056020908152604080832033845260068352818420878552909252822080549192918290610dd89061ffff16611f78565b91906101000a81548161ffff021916908361ffff160217905590508160060160009054906101000a900461ffff1661ffff168161ffff16118015610e235750600682015461ffff1615155b15610e5a576040517f67afcbda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160020154831015610e98576040517f9df8a2c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160050154421115610ed6576040517fee515eaa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600682015461ffff62010000909104811690851610610f21576040517fae38cd7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254610f469073ffffffffffffffffffffffffffffffffffffffff163330866115c7565b3360009081526020838152604080832061ffff8816845290915281208054859290610f72908490611f60565b909155505061ffff8416600090815260018301602052604081208054859290610f9c908490611f60565b9250508190555082826003016000828254610fb79190611f60565b925050819055508260046000828254610fd09190611f60565b9091555050604080513381526020810185905261ffff80871692820192909252908216606082015285907ffdfb268d5a97aeafe639751cec20f2bc5fe89577883480a7523df3b1bc1f1ff290608001610d92565b61102c6113fb565b73ffffffffffffffffffffffffffffffffffffffff81166110cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161069e565b6110d88161147c565b50565b60008381526005602052604081206060919061ffff84166110fb57600193505b600681015461111590869062010000900461ffff16611f9a565b61ffff168461ffff16111561114157600681015461113e90869062010000900461ffff16611f9a565b93505b8361ffff1667ffffffffffffffff81111561115e5761115e611fbd565b604051908082528060200260200182016040528015611187578160200160208202803683370190505b50925060005b8461ffff168161ffff1610156111f5576001820160006111ad8389611fec565b61ffff1661ffff16815260200190815260200160002054848261ffff16815181106111da576111da612012565b60209081029190910101526111ee81611f78565b905061118d565b50826112018587611fec565b9250925050935093915050565b6000828152600560205260408120600601546601000000000000900460ff16611239575060006105cd565b611243838361162b565b9392505050565b6110d881336116d8565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106b15760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556112e63390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156106b15760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161069e565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526105f89084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611790565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526116259085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611545565b50505050565b60008281526005602090815260408083206006810154640100000000900461ffff168452600181019092528220546116675760009150506105cd565b6006810154640100000000900461ffff166000818152600183016020908152604080832054600386015473ffffffffffffffffffffffffffffffffffffffff89168552868452828520958552949092529091205490916116c691612041565b6116d0919061207e565b949350505050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106b1576117168161189c565b6117218360206118bb565b6040516020016117329291906120e5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261069e91600401612166565b60006117f2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611afe9092919063ffffffff16565b8051909150156105f8578080602001905181019061181091906121b7565b6105f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161069e565b60606105cd73ffffffffffffffffffffffffffffffffffffffff831660145b606060006118ca836002612041565b6118d5906002611f60565b67ffffffffffffffff8111156118ed576118ed611fbd565b6040519080825280601f01601f191660200182016040528015611917576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061194e5761194e612012565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106119b1576119b1612012565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006119ed846002612041565b6119f8906001611f60565b90505b6001811115611a95577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611a3957611a39612012565b1a60f81b828281518110611a4f57611a4f612012565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611a8e816121d9565b90506119fb565b508315611243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161069e565b60606116d08484600085856000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b32919061220e565b60006040518083038185875af1925050503d8060008114611b6f576040519150601f19603f3d011682016040523d82523d6000602084013e611b74565b606091505b5091509150611b8587838387611b90565b979650505050505050565b60608315611c23578251611c1c5773ffffffffffffffffffffffffffffffffffffffff85163b611c1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161069e565b50816116d0565b6116d08383815115611c385781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069e9190612166565b600060208284031215611c7e57600080fd5b5035919050565b600060208284031215611c9757600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461124357600080fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114611ceb57600080fd5b919050565b60008060408385031215611d0357600080fd5b611d0c83611cc7565b946020939093013593505050565b60008060408385031215611d2d57600080fd5b82359150611d3d60208401611cc7565b90509250929050565b803561ffff81168114611ceb57600080fd5b60008060408385031215611d6b57600080fd5b82359150611d3d60208401611d46565b600060208284031215611d8d57600080fd5b61124382611cc7565b600080600080600060a08688031215611dae57600080fd5b611db786611d46565b9450611dc560208701611d46565b94979496505050506040830135926060810135926080909101359150565b600080600060608486031215611df857600080fd5b83359250611e0860208501611d46565b9150604084013590509250925092565b600080600060608486031215611e2d57600080fd5b83359250611e3d60208501611d46565b9150611e4b60408501611d46565b90509250925092565b604080825283519082018190526000906020906060840190828701845b82811015611e8d57815184529284019290840190600101611e71565b50505061ffff9490941692019190915250919050565b600080600060608486031215611eb857600080fd5b83359250611e3d60208501611cc7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611f0957611f09611ec8565b500390565b600060208284031215611f2057600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f5957611f59611ec8565b5060010190565b60008219821115611f7357611f73611ec8565b500190565b600061ffff80831681811415611f9057611f90611ec8565b6001019392505050565b600061ffff83811690831681811015611fb557611fb5611ec8565b039392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061ffff80831681851680830382111561200957612009611ec8565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561207957612079611ec8565b500290565b6000826120b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60005b838110156120d45781810151838201526020016120bc565b838111156116255750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161211d8160178501602088016120b9565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161215a8160288401602088016120b9565b01602801949350505050565b60208152600082518060208401526121858160408501602087016120b9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000602082840312156121c957600080fd5b8151801515811461124357600080fd5b6000816121e8576121e8611ec8565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600082516122208184602087016120b9565b919091019291505056fea264697066735822122076ca74859d2eba31cadc9181f7fe39ef018f3576ba249e1ec5960f6bc0c3098e64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101975760003560e01c80639e8c708e116100e3578063eb10d1581161008c578063f86f13ba11610066578063f86f13ba14610480578063fc0c546a14610507578063fc78728d1461052757600080fd5b8063eb10d15814610439578063f2fde38b1461044c578063f3196b5f1461045f57600080fd5b8063d1619908116100bd578063d161990814610400578063d547741f14610413578063e70eb3921461042657600080fd5b80639e8c708e146103dc5780639eed2670146103ef578063a217fddf146103f857600080fd5b806338f3f8eb1161014557806375b238fc1161011f57806375b238fc146103325780638da5cb5b1461035957806391d148541461039857600080fd5b806338f3f8eb1461030e578063536a3ddc14610321578063715018a61461032a57600080fd5b8063248a9ca311610176578063248a9ca3146102b55780632f2ff15d146102e657806336568abe146102fb57600080fd5b80624fbbb01461019c57806301ffc9a714610250578063080df42a14610273575b600080fd5b6102046101aa366004611c6c565b60056020819052600091825260409091206002810154600382015460048301549383015460069093015491939092909161ffff80821691620100008104821691640100000000820416906601000000000000900460ff1688565b60408051988952602089019790975295870194909452606086019290925261ffff908116608086015290811660a08501521660c0830152151560e0820152610100015b60405180910390f35b61026361025e366004611c85565b61053a565b6040519015158152602001610247565b6102a2610281366004611cf0565b600660209081526000928352604080842090915290825290205461ffff1681565b60405161ffff9091168152602001610247565b6102d86102c3366004611c6c565b60009081526020819052604090206001015490565b604051908152602001610247565b6102f96102f4366004611d1a565b6105d3565b005b6102f9610309366004611d1a565b6105fd565b6102f961031c366004611d58565b6106b5565b6102d860035481565b6102f961088a565b6102d87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60015473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610247565b6102636103a6366004611d1a565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6102f96103ea366004611d7b565b61089e565b6102d860045481565b6102d8600081565b6102f961040e366004611d96565b6109ec565b6102f9610421366004611d1a565b610b7f565b6102f9610434366004611d1a565b610ba4565b6102f9610447366004611de3565b610da1565b6102f961045a366004611d7b565b611024565b61047261046d366004611e18565b6110db565b604051610247929190611e54565b6104f261048e366004611ea3565b600083815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452825280832061ffff851684528252918290208251808401909352805480845260019091015460ff1615159290910182905290935093915050565b60408051928352901515602083015201610247565b6002546103739073ffffffffffffffffffffffffffffffffffffffff1681565b6102d8610535366004611d1a565b61120e565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806105cd57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000828152602081905260409020600101546105ee8161124a565b6105f88383611254565b505050565b73ffffffffffffffffffffffffffffffffffffffff811633146106a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6106b18282611344565b5050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756106df8161124a565b600083815260056020526040902060068101546601000000000000900460ff1615610736576040517f991744c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004810154610771576040517f633b245f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806005015442116107ae576040517fdd2048e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006810180547fffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff61ffff86166401000000008102919091167fffffffffffffffffffffffffffffffffffffffffffffffffff000000ffffffff90921691909117660100000000000017909155600090815260018201602052604090205461084b578060030154600460008282546108459190611ef7565b90915550505b60405161ffff8416815284907fa22b773d9d9c167c4b5790dace2919b1e514f1517a568980be43af1fdf41bf129060200160405180910390a250505050565b6108926113fb565b61089c600061147c565b565b6108a66113fb565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109379190611f0e565b60025490915073ffffffffffffffffffffffffffffffffffffffff838116911614156109ac576106b161097f60015473ffffffffffffffffffffffffffffffffffffffff1690565b60045461098c9084611ef7565b60025473ffffffffffffffffffffffffffffffffffffffff1691906114f3565b6106b16109ce60015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff841690836114f3565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610a168161124a565b42821015610a50576040517f2e19adc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254610a759073ffffffffffffffffffffffffffffffffffffffff163330866115c7565b600060056000600360008154610a8a90611f27565b91829055508152602081019190915260400160009081206002810187905560038101869055426004808301919091556005820186905560068201805461ffff8c811662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000909216908c1617179055805491935086929091610b10908490611f60565b909155505060035460048201546040805188815260208101889052808201929092526060820186905261ffff89811660808401528a1660a0830152517fd449b74436531695b31f0a3a97a73ddd8d7bd101a5938bc8dc3829c3ef7b50a29181900360c00190a250505050505050565b600082815260208190526040902060010154610b9a8161124a565b6105f88383611344565b600082815260056020526040902060068101546601000000000000900460ff16610bfa576040517f47bc8d9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152602082815260408083206006850154640100000000900461ffff1684529091529020600181015460ff1615610c77576040517f646cf55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610c83858561162b565b905080610cbc576040517f273b4b7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600182810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909117905560048054829190600090610cff908490611ef7565b9091555050600254610d289073ffffffffffffffffffffffffffffffffffffffff1685836114f3565b815460068401546040805173ffffffffffffffffffffffffffffffffffffffff8816815260208101939093528201839052640100000000900461ffff16606082015285907f4c49710a89d488ef5b4f7f4be97fee6539487344239eab7fc41be528579d741e906080015b60405180910390a25050505050565b600083815260056020908152604080832033845260068352818420878552909252822080549192918290610dd89061ffff16611f78565b91906101000a81548161ffff021916908361ffff160217905590508160060160009054906101000a900461ffff1661ffff168161ffff16118015610e235750600682015461ffff1615155b15610e5a576040517f67afcbda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160020154831015610e98576040517f9df8a2c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160050154421115610ed6576040517fee515eaa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600682015461ffff62010000909104811690851610610f21576040517fae38cd7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254610f469073ffffffffffffffffffffffffffffffffffffffff163330866115c7565b3360009081526020838152604080832061ffff8816845290915281208054859290610f72908490611f60565b909155505061ffff8416600090815260018301602052604081208054859290610f9c908490611f60565b9250508190555082826003016000828254610fb79190611f60565b925050819055508260046000828254610fd09190611f60565b9091555050604080513381526020810185905261ffff80871692820192909252908216606082015285907ffdfb268d5a97aeafe639751cec20f2bc5fe89577883480a7523df3b1bc1f1ff290608001610d92565b61102c6113fb565b73ffffffffffffffffffffffffffffffffffffffff81166110cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161069e565b6110d88161147c565b50565b60008381526005602052604081206060919061ffff84166110fb57600193505b600681015461111590869062010000900461ffff16611f9a565b61ffff168461ffff16111561114157600681015461113e90869062010000900461ffff16611f9a565b93505b8361ffff1667ffffffffffffffff81111561115e5761115e611fbd565b604051908082528060200260200182016040528015611187578160200160208202803683370190505b50925060005b8461ffff168161ffff1610156111f5576001820160006111ad8389611fec565b61ffff1661ffff16815260200190815260200160002054848261ffff16815181106111da576111da612012565b60209081029190910101526111ee81611f78565b905061118d565b50826112018587611fec565b9250925050935093915050565b6000828152600560205260408120600601546601000000000000900460ff16611239575060006105cd565b611243838361162b565b9392505050565b6110d881336116d8565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106b15760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556112e63390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156106b15760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161069e565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526105f89084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611790565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526116259085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611545565b50505050565b60008281526005602090815260408083206006810154640100000000900461ffff168452600181019092528220546116675760009150506105cd565b6006810154640100000000900461ffff166000818152600183016020908152604080832054600386015473ffffffffffffffffffffffffffffffffffffffff89168552868452828520958552949092529091205490916116c691612041565b6116d0919061207e565b949350505050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106b1576117168161189c565b6117218360206118bb565b6040516020016117329291906120e5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261069e91600401612166565b60006117f2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611afe9092919063ffffffff16565b8051909150156105f8578080602001905181019061181091906121b7565b6105f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161069e565b60606105cd73ffffffffffffffffffffffffffffffffffffffff831660145b606060006118ca836002612041565b6118d5906002611f60565b67ffffffffffffffff8111156118ed576118ed611fbd565b6040519080825280601f01601f191660200182016040528015611917576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061194e5761194e612012565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106119b1576119b1612012565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006119ed846002612041565b6119f8906001611f60565b90505b6001811115611a95577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611a3957611a39612012565b1a60f81b828281518110611a4f57611a4f612012565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611a8e816121d9565b90506119fb565b508315611243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161069e565b60606116d08484600085856000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b32919061220e565b60006040518083038185875af1925050503d8060008114611b6f576040519150601f19603f3d011682016040523d82523d6000602084013e611b74565b606091505b5091509150611b8587838387611b90565b979650505050505050565b60608315611c23578251611c1c5773ffffffffffffffffffffffffffffffffffffffff85163b611c1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161069e565b50816116d0565b6116d08383815115611c385781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069e9190612166565b600060208284031215611c7e57600080fd5b5035919050565b600060208284031215611c9757600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461124357600080fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114611ceb57600080fd5b919050565b60008060408385031215611d0357600080fd5b611d0c83611cc7565b946020939093013593505050565b60008060408385031215611d2d57600080fd5b82359150611d3d60208401611cc7565b90509250929050565b803561ffff81168114611ceb57600080fd5b60008060408385031215611d6b57600080fd5b82359150611d3d60208401611d46565b600060208284031215611d8d57600080fd5b61124382611cc7565b600080600080600060a08688031215611dae57600080fd5b611db786611d46565b9450611dc560208701611d46565b94979496505050506040830135926060810135926080909101359150565b600080600060608486031215611df857600080fd5b83359250611e0860208501611d46565b9150604084013590509250925092565b600080600060608486031215611e2d57600080fd5b83359250611e3d60208501611d46565b9150611e4b60408501611d46565b90509250925092565b604080825283519082018190526000906020906060840190828701845b82811015611e8d57815184529284019290840190600101611e71565b50505061ffff9490941692019190915250919050565b600080600060608486031215611eb857600080fd5b83359250611e3d60208501611cc7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611f0957611f09611ec8565b500390565b600060208284031215611f2057600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f5957611f59611ec8565b5060010190565b60008219821115611f7357611f73611ec8565b500190565b600061ffff80831681811415611f9057611f90611ec8565b6001019392505050565b600061ffff83811690831681811015611fb557611fb5611ec8565b039392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061ffff80831681851680830382111561200957612009611ec8565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561207957612079611ec8565b500290565b6000826120b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60005b838110156120d45781810151838201526020016120bc565b838111156116255750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161211d8160178501602088016120b9565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161215a8160288401602088016120b9565b01602801949350505050565b60208152600082518060208401526121858160408501602087016120b9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000602082840312156121c957600080fd5b8151801515811461124357600080fd5b6000816121e8576121e8611ec8565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600082516122208184602087016120b9565b919091019291505056fea264697066735822122076ca74859d2eba31cadc9181f7fe39ef018f3576ba249e1ec5960f6bc0c3098e64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 396,
        "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2374,
        "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)579"
      },
      {
        "astId": 2379,
        "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
        "label": "currentGameId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2381,
        "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
        "label": "accumulateRemainingReward",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2386,
        "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
        "label": "predictions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Prediction)2366_storage)"
      },
      {
        "astId": 2392,
        "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
        "label": "predictionCount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)579": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint16,t_struct(PredictionInfo)2371_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint16 => struct WinnerTakeAll.PredictionInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_struct(PredictionInfo)2371_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint16))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint16)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint16,t_struct(PredictionInfo)2371_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct WinnerTakeAll.PredictionInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PredictionInfo)2371_storage"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Prediction)2366_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WinnerTakeAll.Prediction)",
        "numberOfBytes": "32",
        "value": "t_struct(Prediction)2366_storage"
      },
      "t_mapping(t_uint256,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_struct(Prediction)2366_storage": {
        "encoding": "inplace",
        "label": "struct WinnerTakeAll.Prediction",
        "members": [
          {
            "astId": 2345,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "userPrediction",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_mapping(t_uint16,t_struct(PredictionInfo)2371_storage))"
          },
          {
            "astId": 2349,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "choicePools",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint16,t_uint256)"
          },
          {
            "astId": 2351,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "minPredictAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2353,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "totalPoolPrize",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2355,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "startAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2357,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "endAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2359,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "maxPredictCount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint16"
          },
          {
            "astId": 2361,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "maxChoiceId",
            "offset": 2,
            "slot": "6",
            "type": "t_uint16"
          },
          {
            "astId": 2363,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "winnerId",
            "offset": 4,
            "slot": "6",
            "type": "t_uint16"
          },
          {
            "astId": 2365,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "isClaimable",
            "offset": 6,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(PredictionInfo)2371_storage": {
        "encoding": "inplace",
        "label": "struct WinnerTakeAll.PredictionInfo",
        "members": [
          {
            "astId": 2368,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2370,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "isClaim",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/WinnerTakeAll.sol:WinnerTakeAll",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}